from pmapi.validate import allowed_file
import os
from flask import current_app, flash
from PIL import Image
import base64
from mimetypes import guess_extension
import uuid
import re
from flask_login import current_user
from .model import EventAlbum, AlbumItem
from pmapi.extensions import db
from pmapi import exceptions as exc


def delete_item(id):
    item = get_album_item_by_id(id)
    db.session.delete(item)
    db.session.commit()
    return "", 204


def update_item(id, **kwargs):
    item = get_album_item_or_404(id)
    if "caption" in kwargs:
        item.caption = kwargs.pop("caption")

    if "position" in kwargs:
        position = kwargs.pop("position")
        print(position)
        # pop from current position in list
        print(item.position)

        item.album.items.pop(item.position)
        # add item to list again
        item.album.items.insert(position, item)
        print(item.position)

    db.session.commit()
    return item


def get_album_item_or_404(item_id):
    item = get_album_item_by_id(item_id)
    if item is None:
        msg = "No such item with id {}".format(item_id)
        raise exc.RecordNotFound(msg)
    return item


def get_album_item_by_id(item_id):
    return AlbumItem.query.get(item_id)


def get_event_album_or_404(album_id):
    album = get_album_by_id(album_id)
    if album is None:
        msg = "No such event_album with id {}".format(album_id)
        raise exc.RecordNotFound(msg)
    return album


def get_album_by_id(album_id):
    return EventAlbum.query.get(album_id)


def delete_event_album(album):
    for image in album.event_images:
        db.session.delete(image)
    db.session.flush()
    db.session.delete(album)
    db.session.commit()


def create_album_for_event(event, images=None, creator=current_user):
    album = EventAlbum(event=event, creator=creator)
    db.session.add(album)
    db.session.flush()
    if images:
        add_items_to_album(images, album, creator)
    db.session.commit()
    return album


def create_album_for_event_date(event_date, images=None, creator=current_user):
    if event_date.event_album:
        # event date can only have one album
        album = event_date.event_album
    else:
        album = EventAlbum(
            event=event_date.event, event_date=event_date, creator=creator
        )
        db.session.add(album)
        db.session.flush()

    if images:
        add_items_to_album(images, album, creator)

    db.session.commit()
    return album


def add_items_to_album(items, album, creator=current_user):
    # add images to db
    album_items = []
    for i in items:
        file = i["base64Image"]
        filename, thumb_filename = save_event_image(file, album.event.id, album.id)
        album_item = AlbumItem(
            event=album.event,
            caption=i["caption"],
            filename=filename,
            thumb_filename=thumb_filename,
            creator=creator,
        )
        album_items.append(album_item)
        db.session.add(album_item)
        db.session.flush()
        album.items.append(album_item)
    db.session.commit()
    return album_items


def save_event_image(file, eventId, albumId):

    mimetype = file[file.find("data:") + 5 : file.find(";base64,")]
    file_extension = guess_extension(mimetype)
    if file_extension == ".jpe":
        file_extension = ".jpg"
    unique_filename = str(uuid.uuid4())

    if file and allowed_file(file_extension):
        filename = unique_filename + file_extension
        thumb_filename = unique_filename + "_small" + file_extension
        print("extension:" + file_extension)
        print("filename: " + filename)
        print("thumb_filename:" + thumb_filename)
        path = os.path.join(
            current_app.config["IMAGE_UPLOAD_FOLDER"] + str("album/") + str(albumId)
        )

        if not (os.path.exists(path)):
            # create the directory you want to save to
            os.makedirs(path)

        image_string = re.search(r"base64,(.*)", file).group(1)
        # the string generated by the client includes the mimetype
        # which ISNT in base64.
        # this gets the main base64 string
        with open(os.path.join(path, filename), "wb") as fh:
            fh.write(base64.b64decode(image_string))

        """
        resize to square
        thumb = ImageOps.fit(
            Image.open(
                os.path.join(path, filename)
                ),
            (512, 512),
            Image.ANTIALIAS)
        """
        img = Image.open(os.path.join(path, filename))
        img.thumbnail((512, 512), Image.ANTIALIAS)
        img.save(os.path.join(path, thumb_filename))

        return filename, thumb_filename

    else:
        flash("No selected file")
        return None, None
