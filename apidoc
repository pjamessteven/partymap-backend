"""
api.py
- provides the API endpoints for consuming and producing
  REST requests and responses
"""

from flask import Blueprint, jsonify, request, Flask, redirect, flash, url_for, current_app, send_from_directory
from .models import db, Tag, Event, EventEdit, User
from .oauth import OAuthSignIn
from functools import wraps
import logging
from datetime import datetime, timedelta
import jwt
import difflib
from werkzeug.utils import secure_filename
from flask_uploads import UploadSet, IMAGES, configure_uploads
from flask_login import LoginManager, UserMixin, login_user, logout_user, current_user
api = Blueprint('api', __name__)

images = UploadSet('photos', IMAGES)
configure_uploads(current_app, images)

def allowed_file(filename):
    return '.' in filename and \
           filename.rsplit('.', 1)[1].lower() in current_app.config['ALLOWED_EXTENSIONS']

#decorator function to verify user is authenticated
def token_required(f):
    @wraps(f)
    def _verify(*args, **kwargs):
        auth_headers = request.headers.get('Authorization', '').split()

        invalid_msg = {
            'message': 'Invalid token. Registeration and / or authentication required',
            'authenticated': False
        }
        expired_msg = {
            'message': 'Expired token. Reauthentication required.',
            'authenticated': False
        }

        if len(auth_headers) != 2:
            return jsonify(invalid_msg), 401

        try:
            token = auth_headers[1]
            data = jwt.decode(token, current_app.config['SECRET_KEY'])
            user = User.query.filter_by(email=data['sub']).first()
            if not user:
                raise RuntimeError('User not found')
            return f(user, *args, **kwargs)
        except jwt.ExpiredSignatureError:
            return jsonify(expired_msg), 401 # 401 is Unauthorized HTTP status code
        except (jwt.InvalidTokenError, Exception) as e:
            print(e)
            return jsonify(invalid_msg), 401

    return _verify

#update event by ID number
@api.route('/event/<int:id>', methods=('PUT',))
@token_required
def update_event(current_user, id):
    data = request.get_json()
    event = Event.query.get(id)

    #create eventEdit object
    eventEdit = EventEdit()
    eventEdit.user_id = current_user.id
    eventEdit.event_id = data['id']
    eventEdit.previous_description = event.description
    eventEdit.updated_description = data['description']

    #update event entry
    event.description = data['description']
    #need to assign event_edits, or does backref handle this ???
    db.session.merge(eventEdit)
    db.session.commit()
    return jsonify({ 'eventEdit': eventEdit.to_dict() })

#get event by ID number
@api.route('/event/<int:id>', methods=('GET',))
def event(id):
    event = Event.query.get(id)
    edits = []
    for e in event.event_edits:
        edits.append(e)
    return jsonify({ 'event': event.to_dict()})

#get all events
@api.route('/events/', methods=('GET',))
def fetch_events():
    events = Event.query.all()
    return jsonify ([e.to_dict() for e in events])

#add new event
@api.route('/events/', methods=('POST',))
@token_required
def create_event(current_user):
    data = request.get_json()
    tags = []
    for t in data['event_tags']:
        tag = Tag(tag=t)
        tags.append(tag)
    event = Event(name=data['name'], description=data['description'],
    lat=data['lat'], lng=data['lng'], event_start=data['event_start'], event_end=data['event_end'], event_tags=tags, creator_id=current_user.id)
    #merging - is this ok?
    db.session.merge(event)
    db.session.commit()
    return jsonify(event.to_dict()), 201

#upload image
@app.route('/image/', methods=['GET', 'POST'])
def upload_file():
    if request.method == 'POST':
        # check if the post request has the file part
        if 'image' not in request.files:
            flash('No file part')
            return redirect(request.url)
        image = request.files['image']
        # if user does not select file, browser also
        # submit a empty part without filename
        if image.filename == '':
            flash('No selected file')
            return redirect(request.url)
        if image and allowed_file(image.filename):
            filename = secure_filename(image.filename)
            image.save(os.path.join(current_app.config['UPLOAD_FOLDER'], filename))
            return redirect(url_for('uploaded_file', filename=filename)

@app.route('/uploads/<filename>')
def uploaded_file(filename):
    return send_from_directory(current_app.config['UPLOAD_FOLDER'],
                               filename)

#get all tags
@api.route('/tags/', methods=('GET',))
def tags():
    if request.method == 'GET':
        tags = Tag.query.all()
        return jsonify ([t.tag for t in tags])

@api.route('/register/', methods=('POST',))
def register():
    data = request.get_json()
    user = User(**data)
    db.session.add(user)
    db.session.commit()
    return jsonify(user.to_dict()), 201

@api.route('/login/', methods=('POST',))
def login():
    data = request.get_json()
    user = User.authenticate(**data)

    if not user:
        return jsonify({ 'message': 'Invalid credentials', 'authenticated': False }), 401

    token = jwt.encode({
        'sub': user.email,
        'iat':datetime.utcnow(),
        'exp': datetime.utcnow() + timedelta(minutes=30)},
        current_app.config['SECRET_KEY'])
    return jsonify({ 'token': token.decode('UTF-8') })

@api.route('/authorize/<provider>')
def oauth_authorize(provider):
    if not current_user.is_anonymous:
        return redirect('https://127.0.0.1:8080/')
    oauth = OAuthSignIn.get_provider(provider)
    return oauth.authorize()

@api.route('/callback/<provider>')
def oauth_callback(provider):
    if not current_user.is_anonymous:
        return redirect('https://127.0.0.1:8080/')
    oauth = OAuthSignIn.get_provider(provider)
    social_id, username, email = oauth.callback()
    if social_id is None:
        flash('Authentication failed.')
        return redirect('https://127.0.0.1:8080/')
    user = User.query.filter_by(social_id=social_id).first()
    if not user:
        user = User(social_id=social_id, nickname=username, email=email, oauth='true')
        db.session.add(user)
        db.session.commit()
    login_user(user, True)
    return redirect('https://127.0.0.1:8080/')
